// All of Gosu. 
#include <Gosu/Gosu.hpp> 
// To safely include std::tr1::shared_ptr 
#include <Gosu/TR1.hpp>  
// Makes life easier for Windows users compiling this. 
#include <Gosu/AutoLink.hpp> 
  
#include <cmath> 
#include <cstdlib> 
#include <list> 
#include <sstream> // For int <-> string conversion 
#include <vector> 
  
#include "Animation.h"
#include "GameConstants.h"
#include "Player.h"
#include "Enemy.h"

  
class GameWindow : public Gosu::Window 
{
	Animation playerAnim; 
    Animation enemyAnim;
  
    Player player;
    Enemy enemy;
  
    public: 
        GameWindow() 
        :   Window(XRES, YRES, FULLSCREEN), 
            player(playerAnim),
            enemy(enemyAnim)
        { 
          setCaption(L"Fire Mazing");

          std::wstring playerGraphic = Gosu::resourcePrefix() + L"media/fireman/fireman.bmp";

		  Gosu::imagesFromTiledBitmap(graphics(), playerGraphic, 30, 30, false, playerAnim);
          
		  std::wstring enemyGraphic = Gosu::resourcePrefix() + L"media/enemy/fire.bmp";
          Gosu::imagesFromTiledBitmap(graphics(), enemyGraphic, 30, 30, false, enemyAnim);

          // Set initial positions
          player.warp(XRES / 2, YRES / 2);
          enemy.warp(XRES * 0.75, YRES * 0.75);
        } 
  
        void update() 
        {
          // Check for a collision
          if (collisionDidOccur(player, enemy)) {
			  player.die();
          }
          
          // Move the player
          if (input().down(Gosu::kbUp) || input().down(Gosu::gpUp))
		  {
              player.moveUp();
		  }
          else if (input().down(Gosu::kbDown) || input().down(Gosu::gpDown))
		  {
              player.moveDown();
		  }
          else if (input().down(Gosu::kbLeft) || input().down(Gosu::gpLeft))
		  {
              player.moveLeft();
		  }
          else if (input().down(Gosu::kbRight) || input().down(Gosu::gpRight))
		  {
              player.moveRight();
		  }
        } 
  
        void draw() 
        { 
          player.draw();
          enemy.draw();
        } 
  
        void buttonDown(Gosu::Button btn) 
        { 
          if (btn == Gosu::kbEscape)
             close(); 
        } 

        bool collisionDidOccur(Player player, Enemy enemy)
        {
          if (abs(player.x() - enemy.x()) < 30 && abs(player.y() - enemy.y()) < 30)
            return true;
          return false;
        }

};

int main() 
{ 
    GameWindow window; 
    window.show(); 
} 
